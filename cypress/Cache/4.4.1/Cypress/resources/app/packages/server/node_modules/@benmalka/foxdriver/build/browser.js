"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _actor = require("./actor");

var _actor2 = _interopRequireDefault(_actor);

var _client = require("./client");

var _client2 = _interopRequireDefault(_client);

var _tab = require("./tab");

var _tab2 = _interopRequireDefault(_tab);

var _os = require("os");

var _os2 = _interopRequireDefault(_os);

var _child_process = require("child_process");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Browser extends _actor2.default {
  constructor(host, port) {
    const client = new _client2.default(host, port);
    client.on('error', error => this.emit('error', error));
    client.on('end', () => this.emit('end'));
    client.on('timeout', () => this.emit('timeout'));
    super(client, 'root');
    this.cachedTabs = new Map();
  }

  get preference() {
    return this._get('preference');
  }

  get actorRegistry() {
    return this._get('actorRegistry');
  }

  get addons() {
    return this._get('addons');
  }

  get device() {
    return this._get('device');
  }

  get heapSnapshotFile() {
    return this._get('heapSnapshotFile');
  }

  async connect() {
    await this.client.connect();
    this.client.expectReply(this.name, ({
      traits
    }) => {
      this.traits = traits;
    });
    this.tabs = await this.listTabs();
    return this.tabs;
  }

  disconnect() {
    this.client.disconnect();
  }

  close() {
    this.disconnect();
    /**
     * only shut down browser if started via launcher
     */

    if (!this.firefoxProcess) {
      return console.error('Can\'t close the browser because client was attached to an' + 'already opened Firefox instance');
    }

    this.firefoxProcess.kill();

    if (!this.firefoxProcess.killed) {
      if (_os2.default.platform() === 'win32') {
        (0, _child_process.spawn)('taskkill', ['/f', '/IM', 'firefox.exe', '/t']);
      } else if (_os2.default.platform() === 'darwin' || _os2.default.platform() === 'linux') {
        (0, _child_process.spawn)('killall', ['-q', '-I', 'firefox']);
      }
    }
  }

  async listTabs() {
    let listTabsResponse = await this.request('listTabs');

    if (!listTabsResponse.tabs) {
      listTabsResponse = await this.request('listTabs');
    }

    this.setActors(listTabsResponse);
    const tabList = await Promise.all(listTabsResponse.tabs.map(async tab => {
      if (this.cachedTabs.has(tab.actor)) {
        return this.cachedTabs.get(tab.actor);
      }

      let newTab = new _tab2.default(this.client, tab.actor, tab);
      this.cachedTabs.set(tab.actor, newTab); // Firefox 75: getTarget

      if (!tab.url) {
        await newTab.getTarget();
      }

      return newTab;
    }));

    this._cleanCache(listTabsResponse.tabs.map(tab => tab.actor));

    return tabList;
  }

  _cleanCache(activeTabs) {
    Array.from(this.cachedTabs.keys()).forEach(tabName => {
      if (!activeTabs.includes(tabName)) {
        this.cachedTabs.delete(tabName);
      }
    });
  }

}

exports.default = Browser;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,